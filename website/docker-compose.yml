version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lingualink-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: lingualink_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init:/docker-entrypoint-initdb.d
    networks:
      - lingualink-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d lingualink_dev"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lingualink-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lingualink-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: lingualink-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/lingualink_dev
      - REDIS_URL=redis://redis:6379
      - PORT=3001
      - API_PREFIX=api
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lingualink-network
    command: npm run start:dev

  # Frontend Web App (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: lingualink-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_WS_URL=ws://localhost:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - lingualink-network
    command: npm run dev

  # Database Admin (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: lingualink-pgadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@lingualink.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - lingualink-network
    profiles:
      - tools

  # Redis Commander (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: lingualink-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - lingualink-network
    profiles:
      - tools

networks:
  lingualink-network:
    driver: bridge
    name: lingualink-network

volumes:
  postgres_data:
    name: lingualink-postgres-data
  redis_data:
    name: lingualink-redis-data
  pgadmin_data:
    name: lingualink-pgadmin-data 